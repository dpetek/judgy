<?php

namespace DoctrineMongoODMModule\Hydrator;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class JudgeDocumentUserHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="string") */
        if (isset($data['username'])) {
            $value = $data['username'];
            $return = (string) $value;
            $this->class->reflFields['username']->setValue($document, $return);
            $hydratedData['username'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['name'])) {
            $value = $data['name'];
            $return = (string) $value;
            $this->class->reflFields['name']->setValue($document, $return);
            $hydratedData['name'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['ph'])) {
            $value = $data['ph'];
            $return = (string) $value;
            $this->class->reflFields['passwordHash']->setValue($document, $return);
            $hydratedData['passwordHash'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email'])) {
            $value = $data['email'];
            $return = (string) $value;
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="float") */
        if (isset($data['score'])) {
            $value = $data['score'];
            $return = (float) $value;
            $this->class->reflFields['score']->setValue($document, $return);
            $hydratedData['score'] = $return;
        }

        /** @Field(type="increment") */
        if (isset($data['misc_score'])) {
            $value = $data['misc_score'];
            $return = is_float($value) ? (float) $value : (int) $value;
            $this->class->reflFields['miscScore']->setValue($document, $return);
            $hydratedData['miscScore'] = $return;
        }

        /** @Field(type="increment") */
        if (isset($data['algorithm_score'])) {
            $value = $data['algorithm_score'];
            $return = is_float($value) ? (float) $value : (int) $value;
            $this->class->reflFields['algorithmScore']->setValue($document, $return);
            $hydratedData['algorithmScore'] = $return;
        }

        /** @Field(type="increment") */
        if (isset($data['misc_solved'])) {
            $value = $data['misc_solved'];
            $return = is_float($value) ? (float) $value : (int) $value;
            $this->class->reflFields['miscSolved']->setValue($document, $return);
            $hydratedData['miscSolved'] = $return;
        }

        /** @Field(type="increment") */
        if (isset($data['algorithm_solved'])) {
            $value = $data['algorithm_solved'];
            $return = is_float($value) ? (float) $value : (int) $value;
            $this->class->reflFields['algorithmSolved']->setValue($document, $return);
            $hydratedData['algorithmSolved'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isadmin'])) {
            $value = $data['isadmin'];
            $return = (bool) $value;
            $this->class->reflFields['isAdmin']->setValue($document, $return);
            $hydratedData['isAdmin'] = $return;
        }

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }
        return $hydratedData;
    }
}